//有虚基类时的构造函数
#include <iostream>
#include <cstdio>
using namespace std;
class Base0 {
public:
	Base0(int var) :var0(var) {}
	int var0;						//虚继承导致var0这个变量只有一个
	void fun0() { cout << "Member of Base0" << endl; }
};
class Base1 :virtual public Base0{
public:
	Base1(int var) :Base0(var) {}
	int var1;
};
class Base2 :virtual public Base0 {
public:
	Base2(int var) :Base0(var) {}
	int var2;
};
class Derived :public Base1, public Base2 {
public:
	Derived(int var) :Base0(var), Base1(var), Base2(var) {} // Base0的构造函数只会被调用一次，只有最远的Derived类的构造函数会调用Base0的构造函数，其他类的调用会被忽略
	int var;
	void fun() {
		cout << "Member of Derived" << endl;
	}
};
int main() {
	Derived d(1);		//Derived类是最远派生类
	d.var0 = 2;//直接访问虚基类的成员
	d.fun0();//直接访问虚基类的成员函数
	return 0;
}
