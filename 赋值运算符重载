#include <iostream>
#include <cstdio>
using namespace std;
class Person {
public:
	Person(int age) {
		m_age = new int(age);
	}
	Person() {
		cout << m_age << endl;
	}
	Person& operator=(Person& p) {
		//编译器提供的是浅拷贝
		//m_age=p.m_age

		//先判断是否有属性在堆区，如果有，先释放干净，然后再深拷贝
		if (m_age != NULL)
		{
			delete m_age;
			m_age = NULL;
		}
		//深拷贝
		m_age = new int(*p.m_age);
		return *this;
	}
	int* m_age;
	~Person() {
		if (m_age != NULL) {
			delete m_age;
			m_age = NULL;
		}
	}
	
};

void test01(){
	Person p1(18);
	Person p2(20);
	Person p3(30);
	p3=p2 = p1;
	cout << *p1.m_age << endl; 
	cout << *p2.m_age << endl;
	cout << *p3.m_age << endl;
}

int main() {
	test01();
	
	return 0;	
}
