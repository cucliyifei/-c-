#include <iostream>
#include <cstdio>
using namespace std;
class MyInteger {
	friend ostream& operator<<(ostream& cout, MyInteger& myint);
	int m_num;
public:
	MyInteger() {
		m_num = 0;
	}
	//重载前置++运算符  //返回引用是为了对同一个对象进行++运算
	MyInteger& operator++() {
		//先进行++运算
		m_num++;
		//再返回本身
		return *this;
	}
	//重载后置++运算符 int代表占位参数，用于区分前置和后置
	MyInteger operator++(int) {		//返回的是值，不是引用，因为返回的temp是一个临时对象
		MyInteger temp = *this; //先保存当前对象的值
		m_num++; //再进行++运算
		return temp; //返回保存的对象
	}
	//重载前置减法运算符
	MyInteger& operator--() {
		m_num--;
		return *this;
	}
};
ostream& operator<<(ostream& cout, MyInteger &myint) {
	cout << myint.m_num;
	return cout;
}

void test01(){
	MyInteger myint;
	cout << ++myint << endl;

}
void test02() {
	MyInteger myint;
	//cout << myint++ << endl; //后置++运算符//使用时需要把<<重载函数的第二个参数的引用去掉（友元也是）
	cout << myint << endl; //输出++运算后的值
}
void test03() {
	MyInteger myint;
	cout << --myint << endl; //前置--运算符
	cout << myint << endl; //输出--运算后的值
}
int main() {
	test01();
	test02();
	test03();
	return 0;	
}
